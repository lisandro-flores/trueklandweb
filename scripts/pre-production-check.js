#!/usr/bin/env node

/**
 * Script de verificaci√≥n pre-producci√≥n para TruekLand
 * Ejecuta todas las verificaciones necesarias antes del despliegue
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando verificaci√≥n pre-producci√≥n de TruekLand...\n');

const checks = [
  {
    name: 'Verificaci√≥n de variables de entorno',
    run: () => {
      const requiredEnvVars = [
        'NEXT_PUBLIC_FIREBASE_API_KEY',
        'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
        'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
        'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
        'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
        'NEXT_PUBLIC_FIREBASE_APP_ID'
      ];

      const envFile = path.join(process.cwd(), '.env.local');
      if (!fs.existsSync(envFile)) {
        throw new Error('Archivo .env.local no encontrado');
      }

      const envContent = fs.readFileSync(envFile, 'utf8');
      const missingVars = requiredEnvVars.filter(varName => !envContent.includes(varName));
      
      if (missingVars.length > 0) {
        throw new Error(`Variables de entorno faltantes: ${missingVars.join(', ')}`);
      }
      
      console.log('‚úÖ Variables de entorno configuradas correctamente');
    }
  },
  {
    name: 'Verificaci√≥n de tipos TypeScript',
    run: () => {
      execSync('npm run type-check', { stdio: 'inherit' });
      console.log('‚úÖ Verificaci√≥n de tipos completada');
    }
  },
  {
    name: 'Verificaci√≥n de linting',
    run: () => {
      execSync('npm run lint', { stdio: 'inherit' });
      console.log('‚úÖ Linting completado sin errores');
    }
  },
  {
    name: 'Build de producci√≥n',
    run: () => {
      execSync('npm run build', { stdio: 'inherit' });
      console.log('‚úÖ Build de producci√≥n completado exitosamente');
    }
  },
  {
    name: 'Verificaci√≥n de archivos cr√≠ticos',
    run: () => {
      const criticalFiles = [
        'package.json',
        'next.config.js',
        'middleware.ts',
        'firestore.rules',
        'public/manifest.json',
        'lib/firebase.ts'
      ];

      const missingFiles = criticalFiles.filter(file => !fs.existsSync(path.join(process.cwd(), file)));
      
      if (missingFiles.length > 0) {
        throw new Error(`Archivos cr√≠ticos faltantes: ${missingFiles.join(', ')}`);
      }
      
      console.log('‚úÖ Todos los archivos cr√≠ticos est√°n presentes');
    }
  },
  {
    name: 'Verificaci√≥n de configuraci√≥n de seguridad',
    run: () => {
      const nextConfig = fs.readFileSync(path.join(process.cwd(), 'next.config.js'), 'utf8');
      
      if (!nextConfig.includes('Content-Security-Policy')) {
        throw new Error('Content Security Policy no configurada');
      }
      
      if (!nextConfig.includes('X-Frame-Options')) {
        throw new Error('X-Frame-Options no configurado');
      }
      
      console.log('‚úÖ Configuraci√≥n de seguridad verificada');
    }
  },
  {
    name: 'Verificaci√≥n de PWA',
    run: () => {
      const manifestPath = path.join(process.cwd(), 'public/manifest.json');
      if (!fs.existsSync(manifestPath)) {
        throw new Error('Manifest.json no encontrado');
      }
      
      const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
      
      if (!manifest.name || !manifest.short_name || !manifest.icons) {
        throw new Error('Manifest.json incompleto');
      }
      
      console.log('‚úÖ Configuraci√≥n PWA verificada');
    }
  }
];

let successCount = 0;
let totalChecks = checks.length;

for (const check of checks) {
  try {
    console.log(`üîç ${check.name}...`);
    check.run();
    successCount++;
    console.log('');
  } catch (error) {
    console.error(`‚ùå ${check.name} fall√≥:`);
    console.error(error.message);
    console.log('');
    process.exit(1);
  }
}

console.log(`üéâ ¬°Verificaci√≥n completada! ${successCount}/${totalChecks} verificaciones exitosas`);
console.log('');
console.log('‚ú® Tu aplicaci√≥n TruekLand est√° lista para producci√≥n!');
console.log('');
console.log('üìã Checklist final:');
console.log('  ‚Ä¢ Aseg√∫rate de tener configuradas las reglas de Firestore');
console.log('  ‚Ä¢ Verifica que el dominio est√© autorizado en Firebase Console');
console.log('  ‚Ä¢ Configura las variables de entorno en tu plataforma de hosting');
console.log('  ‚Ä¢ Habilita HTTPS en producci√≥n');
console.log('  ‚Ä¢ Configura monitoring y analytics');
